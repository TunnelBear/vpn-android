/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_ovpncliJNI = NULL;
    jmethodID director_method_ids[33];
  }
}

#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "ovpncli.hpp"

SWIGINTERN std::vector< openvpn::ClientAPI::ServerEntry >::const_reference std_vector_Sl_openvpn_ClientAPI_ServerEntry_Sg__get(std::vector< openvpn::ClientAPI::ServerEntry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_openvpn_ClientAPI_ServerEntry_Sg__set(std::vector< openvpn::ClientAPI::ServerEntry > *self,int i,std::vector< openvpn::ClientAPI::ServerEntry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ovpncli_wrap.h"

SwigDirector_ClientAPI_OpenVPNClient::SwigDirector_ClientAPI_OpenVPNClient(JNIEnv *jenv) : openvpn::ClientAPI::OpenVPNClient(), Swig::Director(jenv) {
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_new() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return openvpn::TunBuilderBase::tun_builder_new();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_new ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_layer(int layer) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jlayer  ;
  
  if (!swig_override[1]) {
    return openvpn::TunBuilderBase::tun_builder_set_layer(layer);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlayer = (jint) layer;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[1], swigjobj, jlayer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_layer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_remote_address(std::string const &address, bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaddress = 0 ;
  jboolean jipv6  ;
  
  if (!swig_override[2]) {
    return openvpn::TunBuilderBase::tun_builder_set_remote_address(address,ipv6);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaddress = jenv->NewStringUTF((&address)->c_str());
    Swig::LocalRefGuard address_refguard(jenv, jaddress); 
    jipv6 = (jboolean) ipv6;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[2], swigjobj, jaddress, jipv6);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_remote_address ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_address(std::string const &address, int prefix_length, std::string const &gateway, bool ipv6, bool net30) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaddress = 0 ;
  jint jprefix_length  ;
  jstring jgateway = 0 ;
  jboolean jipv6  ;
  jboolean jnet30  ;
  
  if (!swig_override[3]) {
    return openvpn::TunBuilderBase::tun_builder_add_address(address,prefix_length,gateway,ipv6,net30);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaddress = jenv->NewStringUTF((&address)->c_str());
    Swig::LocalRefGuard address_refguard(jenv, jaddress); 
    jprefix_length = (jint) prefix_length;
    jgateway = jenv->NewStringUTF((&gateway)->c_str());
    Swig::LocalRefGuard gateway_refguard(jenv, jgateway); 
    jipv6 = (jboolean) ipv6;
    jnet30 = (jboolean) net30;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[3], swigjobj, jaddress, jprefix_length, jgateway, jipv6, jnet30);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_add_address ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_route_metric_default(int metric) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jmetric  ;
  
  if (!swig_override[4]) {
    return openvpn::TunBuilderBase::tun_builder_set_route_metric_default(metric);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmetric = (jint) metric;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[4], swigjobj, jmetric);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_route_metric_default ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_reroute_gw(bool ipv4, bool ipv6, unsigned int flags) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jipv4  ;
  jboolean jipv6  ;
  jlong jflags  ;
  
  if (!swig_override[5]) {
    return openvpn::TunBuilderBase::tun_builder_reroute_gw(ipv4,ipv6,flags);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jipv4 = (jboolean) ipv4;
    jipv6 = (jboolean) ipv6;
    jflags = (jlong) flags;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[5], swigjobj, jipv4, jipv6, jflags);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_reroute_gw ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_route(std::string const &address, int prefix_length, int metric, bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaddress = 0 ;
  jint jprefix_length  ;
  jint jmetric  ;
  jboolean jipv6  ;
  
  if (!swig_override[6]) {
    return openvpn::TunBuilderBase::tun_builder_add_route(address,prefix_length,metric,ipv6);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaddress = jenv->NewStringUTF((&address)->c_str());
    Swig::LocalRefGuard address_refguard(jenv, jaddress); 
    jprefix_length = (jint) prefix_length;
    jmetric = (jint) metric;
    jipv6 = (jboolean) ipv6;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[6], swigjobj, jaddress, jprefix_length, jmetric, jipv6);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_add_route ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_exclude_route(std::string const &address, int prefix_length, int metric, bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaddress = 0 ;
  jint jprefix_length  ;
  jint jmetric  ;
  jboolean jipv6  ;
  
  if (!swig_override[7]) {
    return openvpn::TunBuilderBase::tun_builder_exclude_route(address,prefix_length,metric,ipv6);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaddress = jenv->NewStringUTF((&address)->c_str());
    Swig::LocalRefGuard address_refguard(jenv, jaddress); 
    jprefix_length = (jint) prefix_length;
    jmetric = (jint) metric;
    jipv6 = (jboolean) ipv6;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[7], swigjobj, jaddress, jprefix_length, jmetric, jipv6);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_exclude_route ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_dns_server(std::string const &address, bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaddress = 0 ;
  jboolean jipv6  ;
  
  if (!swig_override[8]) {
    return openvpn::TunBuilderBase::tun_builder_add_dns_server(address,ipv6);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaddress = jenv->NewStringUTF((&address)->c_str());
    Swig::LocalRefGuard address_refguard(jenv, jaddress); 
    jipv6 = (jboolean) ipv6;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[8], swigjobj, jaddress, jipv6);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_add_dns_server ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_search_domain(std::string const &domain) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jdomain = 0 ;
  
  if (!swig_override[9]) {
    return openvpn::TunBuilderBase::tun_builder_add_search_domain(domain);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdomain = jenv->NewStringUTF((&domain)->c_str());
    Swig::LocalRefGuard domain_refguard(jenv, jdomain); 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[9], swigjobj, jdomain);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_add_search_domain ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_mtu(int mtu) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jmtu  ;
  
  if (!swig_override[10]) {
    return openvpn::TunBuilderBase::tun_builder_set_mtu(mtu);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmtu = (jint) mtu;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[10], swigjobj, jmtu);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_mtu ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_session_name(std::string const &name) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[11]) {
    return openvpn::TunBuilderBase::tun_builder_set_session_name(name);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[11], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_session_name ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_proxy_bypass(std::string const &bypass_host) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jbypass_host = 0 ;
  
  if (!swig_override[12]) {
    return openvpn::TunBuilderBase::tun_builder_add_proxy_bypass(bypass_host);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbypass_host = jenv->NewStringUTF((&bypass_host)->c_str());
    Swig::LocalRefGuard bypass_host_refguard(jenv, jbypass_host); 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[12], swigjobj, jbypass_host);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_add_proxy_bypass ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_proxy_auto_config_url(std::string const &url) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jurl = 0 ;
  
  if (!swig_override[13]) {
    return openvpn::TunBuilderBase::tun_builder_set_proxy_auto_config_url(url);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jurl = jenv->NewStringUTF((&url)->c_str());
    Swig::LocalRefGuard url_refguard(jenv, jurl); 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[13], swigjobj, jurl);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_proxy_auto_config_url ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_proxy_http(std::string const &host, int port) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jhost = 0 ;
  jint jport  ;
  
  if (!swig_override[14]) {
    return openvpn::TunBuilderBase::tun_builder_set_proxy_http(host,port);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhost = jenv->NewStringUTF((&host)->c_str());
    Swig::LocalRefGuard host_refguard(jenv, jhost); 
    jport = (jint) port;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[14], swigjobj, jhost, jport);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_proxy_http ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_proxy_https(std::string const &host, int port) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jhost = 0 ;
  jint jport  ;
  
  if (!swig_override[15]) {
    return openvpn::TunBuilderBase::tun_builder_set_proxy_https(host,port);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhost = jenv->NewStringUTF((&host)->c_str());
    Swig::LocalRefGuard host_refguard(jenv, jhost); 
    jport = (jint) port;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[15], swigjobj, jhost, jport);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_proxy_https ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_wins_server(std::string const &address) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaddress = 0 ;
  
  if (!swig_override[16]) {
    return openvpn::TunBuilderBase::tun_builder_add_wins_server(address);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaddress = jenv->NewStringUTF((&address)->c_str());
    Swig::LocalRefGuard address_refguard(jenv, jaddress); 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[16], swigjobj, jaddress);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_add_wins_server ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_block_ipv6(bool block_ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jblock_ipv6  ;
  
  if (!swig_override[17]) {
    return openvpn::TunBuilderBase::tun_builder_set_block_ipv6(block_ipv6);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jblock_ipv6 = (jboolean) block_ipv6;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[17], swigjobj, jblock_ipv6);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_block_ipv6 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_adapter_domain_suffix(std::string const &name) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[18]) {
    return openvpn::TunBuilderBase::tun_builder_set_adapter_domain_suffix(name);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[18], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_set_adapter_domain_suffix ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ClientAPI_OpenVPNClient::tun_builder_establish() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[19]) {
    return openvpn::TunBuilderBase::tun_builder_establish();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[19], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_establish ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_persist() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[20]) {
    return openvpn::TunBuilderBase::tun_builder_persist();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[20], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_persist ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::string > const SwigDirector_ClientAPI_OpenVPNClient::tun_builder_get_local_networks(bool ipv6) {
  std::vector< std::string > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jipv6  ;
  std::vector< std::string > const *argp ;
  
  if (!swig_override[21]) {
    return openvpn::TunBuilderBase::tun_builder_get_local_networks(ipv6);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jipv6 = (jboolean) ipv6;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[21], swigjobj, jipv6);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::string > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::string > const");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_get_local_networks ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ClientAPI_OpenVPNClient::tun_builder_establish_lite() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[22]) {
    openvpn::TunBuilderBase::tun_builder_establish_lite();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_establish_lite ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientAPI_OpenVPNClient::tun_builder_teardown(bool disconnect) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jdisconnect  ;
  
  if (!swig_override[23]) {
    openvpn::TunBuilderBase::tun_builder_teardown(disconnect);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdisconnect = (jboolean) disconnect;
    jenv->CallStaticVoidMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[23], swigjobj, jdisconnect);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::tun_builder_teardown ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_ClientAPI_OpenVPNClient::~SwigDirector_ClientAPI_OpenVPNClient() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_ClientAPI_OpenVPNClient::socket_protect(int socket, std::string remote, bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jsocket  ;
  jstring jremote  ;
  jboolean jipv6  ;
  
  if (!swig_override[24]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method openvpn::ClientAPI::OpenVPNClient::socket_protect.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsocket = (jint) socket;
    jremote = jenv->NewStringUTF((&remote)->c_str());
    Swig::LocalRefGuard remote_refguard(jenv, jremote); 
    jipv6 = (jboolean) ipv6;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[24], swigjobj, jsocket, jremote, jipv6);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::socket_protect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ClientAPI_OpenVPNClient::pause_on_connection_timeout() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[25]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method openvpn::ClientAPI::OpenVPNClient::pause_on_connection_timeout.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[25], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::pause_on_connection_timeout ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ClientAPI_OpenVPNClient::event(openvpn::ClientAPI::Event const &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[26]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method openvpn::ClientAPI::OpenVPNClient::event.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(openvpn::ClientAPI::Event **)&jarg0 = (openvpn::ClientAPI::Event *) &arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[26], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::event ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientAPI_OpenVPNClient::log(openvpn::ClientAPI::LogInfo const &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[27]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method openvpn::ClientAPI::OpenVPNClient::log.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(openvpn::ClientAPI::LogInfo **)&jarg0 = (openvpn::ClientAPI::LogInfo *) &arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[27], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientAPI_OpenVPNClient::external_pki_cert_request(openvpn::ClientAPI::ExternalPKICertRequest &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[28]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method openvpn::ClientAPI::OpenVPNClient::external_pki_cert_request.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(openvpn::ClientAPI::ExternalPKICertRequest **)&jarg0 = (openvpn::ClientAPI::ExternalPKICertRequest *) &arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[28], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::external_pki_cert_request ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientAPI_OpenVPNClient::external_pki_sign_request(openvpn::ClientAPI::ExternalPKISignRequest &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[29]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method openvpn::ClientAPI::OpenVPNClient::external_pki_sign_request.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg0 = (openvpn::ClientAPI::ExternalPKISignRequest *) &arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[29], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::external_pki_sign_request ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ClientAPI_OpenVPNClient::remote_override_enabled() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[30]) {
    return openvpn::ClientAPI::OpenVPNClient::remote_override_enabled();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[30], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::remote_override_enabled ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ClientAPI_OpenVPNClient::remote_override(openvpn::ClientAPI::RemoteOverride &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[31]) {
    openvpn::ClientAPI::OpenVPNClient::remote_override(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(openvpn::ClientAPI::RemoteOverride **)&jarg0 = (openvpn::ClientAPI::RemoteOverride *) &arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[31], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::remote_override ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientAPI_OpenVPNClient::clock_tick() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[32]) {
    openvpn::ClientAPI::OpenVPNClient::clock_tick();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_ovpncliJNI, Swig::director_method_ids[32], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in openvpn::ClientAPI::OpenVPNClient::clock_tick ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientAPI_OpenVPNClient::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "tun_builder_new", "()Z", NULL 
    },
    {
      "tun_builder_set_layer", "(I)Z", NULL 
    },
    {
      "tun_builder_set_remote_address", "(Ljava/lang/String;Z)Z", NULL 
    },
    {
      "tun_builder_add_address", "(Ljava/lang/String;ILjava/lang/String;ZZ)Z", NULL 
    },
    {
      "tun_builder_set_route_metric_default", "(I)Z", NULL 
    },
    {
      "tun_builder_reroute_gw", "(ZZJ)Z", NULL 
    },
    {
      "tun_builder_add_route", "(Ljava/lang/String;IIZ)Z", NULL 
    },
    {
      "tun_builder_exclude_route", "(Ljava/lang/String;IIZ)Z", NULL 
    },
    {
      "tun_builder_add_dns_server", "(Ljava/lang/String;Z)Z", NULL 
    },
    {
      "tun_builder_add_search_domain", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "tun_builder_set_mtu", "(I)Z", NULL 
    },
    {
      "tun_builder_set_session_name", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "tun_builder_add_proxy_bypass", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "tun_builder_set_proxy_auto_config_url", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "tun_builder_set_proxy_http", "(Ljava/lang/String;I)Z", NULL 
    },
    {
      "tun_builder_set_proxy_https", "(Ljava/lang/String;I)Z", NULL 
    },
    {
      "tun_builder_add_wins_server", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "tun_builder_set_block_ipv6", "(Z)Z", NULL 
    },
    {
      "tun_builder_set_adapter_domain_suffix", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "tun_builder_establish", "()I", NULL 
    },
    {
      "tun_builder_persist", "()Z", NULL 
    },
    {
      "tun_builder_get_local_networks", "(Z)Lnet/openvpn/ovpn3/ClientAPI_StringVec;", NULL 
    },
    {
      "tun_builder_establish_lite", "()V", NULL 
    },
    {
      "tun_builder_teardown", "(Z)V", NULL 
    },
    {
      "socket_protect", "(ILjava/lang/String;Z)Z", NULL 
    },
    {
      "pause_on_connection_timeout", "()Z", NULL 
    },
    {
      "event", "(Lnet/openvpn/ovpn3/ClientAPI_Event;)V", NULL 
    },
    {
      "log", "(Lnet/openvpn/ovpn3/ClientAPI_LogInfo;)V", NULL 
    },
    {
      "external_pki_cert_request", "(Lnet/openvpn/ovpn3/ClientAPI_ExternalPKICertRequest;)V", NULL 
    },
    {
      "external_pki_sign_request", "(Lnet/openvpn/ovpn3/ClientAPI_ExternalPKISignRequest;)V", NULL 
    },
    {
      "remote_override_enabled", "()Z", NULL 
    },
    {
      "remote_override", "(Lnet/openvpn/ovpn3/ClientAPI_RemoteOverride;)V", NULL 
    },
    {
      "clock_tick", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("net/openvpn/ovpn3/ClientAPI_OpenVPNClient");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 33; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1ServerEntryVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< openvpn::ClientAPI::ServerEntry > *)new std::vector< openvpn::ClientAPI::ServerEntry >();
  *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1ServerEntryVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::size_type arg1 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< openvpn::ClientAPI::ServerEntry >::size_type)jarg1; 
  result = (std::vector< openvpn::ClientAPI::ServerEntry > *)new std::vector< openvpn::ClientAPI::ServerEntry >(arg1);
  *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntryVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  result = ((std::vector< openvpn::ClientAPI::ServerEntry > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntryVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  result = ((std::vector< openvpn::ClientAPI::ServerEntry > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntryVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  arg2 = (std::vector< openvpn::ClientAPI::ServerEntry >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntryVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  result = (bool)((std::vector< openvpn::ClientAPI::ServerEntry > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntryVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntryVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  arg2 = *(std::vector< openvpn::ClientAPI::ServerEntry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< openvpn::ClientAPI::ServerEntry >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< openvpn::ClientAPI::ServerEntry >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntryVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  int arg2 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< openvpn::ClientAPI::ServerEntry >::value_type *) &std_vector_Sl_openvpn_ClientAPI_ServerEntry_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< openvpn::ClientAPI::ServerEntry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntryVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  int arg2 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< openvpn::ClientAPI::ServerEntry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< openvpn::ClientAPI::ServerEntry >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_openvpn_ClientAPI_ServerEntry_Sg__set(arg1,arg2,(openvpn::ClientAPI::ServerEntry const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1ServerEntryVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1LLVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< long long > *)new std::vector< long long >();
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1LLVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< long long >::size_type arg1 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< long long >::size_type)jarg1; 
  result = (std::vector< long long > *)new std::vector< long long >(arg1);
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LLVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  result = ((std::vector< long long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LLVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  result = ((std::vector< long long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LLVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (std::vector< long long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LLVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LLVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LLVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  std::vector< long long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  temp2 = (std::vector< long long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LLVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LLVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  std::vector< long long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1LLVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1StringVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1StringVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1StringVec_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1StringVec_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1StringVec_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1StringVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1StringVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1StringVec_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1StringVec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1StringVec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1StringVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIBase_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  openvpn::ExternalPKIBase *arg1 = (openvpn::ExternalPKIBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ExternalPKIBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->sign((std::string const &)*arg2,*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1ExternalPKIBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ExternalPKIBase *arg1 = (openvpn::ExternalPKIBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ExternalPKIBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1new(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  result = (bool)(arg1)->tun_builder_new();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1layer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->tun_builder_set_layer(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1remote_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->tun_builder_set_remote_address((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1add_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jboolean jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->tun_builder_add_address((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1route_1metric_1default(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->tun_builder_set_route_metric_default(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1reroute_1gw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->tun_builder_reroute_gw(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1add_1route(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->tun_builder_add_route((std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1exclude_1route(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->tun_builder_exclude_route((std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1add_1dns_1server(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->tun_builder_add_dns_server((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1add_1search_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->tun_builder_add_search_domain((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1mtu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->tun_builder_set_mtu(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1session_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->tun_builder_set_session_name((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1add_1proxy_1bypass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->tun_builder_add_proxy_bypass((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1proxy_1auto_1config_1url(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->tun_builder_set_proxy_auto_config_url((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1proxy_1http(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->tun_builder_set_proxy_http((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1proxy_1https(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->tun_builder_set_proxy_https((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1add_1wins_1server(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->tun_builder_add_wins_server((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1block_1ipv6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->tun_builder_set_block_ipv6(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1set_1adapter_1domain_1suffix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->tun_builder_set_adapter_domain_suffix((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1establish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  result = (int)(arg1)->tun_builder_establish();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1persist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  result = (bool)(arg1)->tun_builder_persist();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1get_1local_1networks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool arg2 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->tun_builder_get_local_networks(arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1establish_1lite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  (arg1)->tun_builder_establish_lite();
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TunBuilderBase_1tun_1builder_1teardown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->tun_builder_teardown(arg2);
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1TunBuilderBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::TunBuilderBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1TunBuilderBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::TunBuilderBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::TunBuilderBase *)new openvpn::TunBuilderBase();
  *(openvpn::TunBuilderBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntry_1server_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->server = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntry_1server_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&jarg1; 
  result = (std::string *) & ((arg1)->server);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntry_1friendlyName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->friendlyName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ServerEntry_1friendlyName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&jarg1; 
  result = (std::string *) & ((arg1)->friendlyName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1ServerEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::ServerEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::ServerEntry *)new openvpn::ClientAPI::ServerEntry();
  *(openvpn::ClientAPI::ServerEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1ServerEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (bool) ((arg1)->error);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1userlockedUsername_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->userlockedUsername = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1userlockedUsername_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->userlockedUsername);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1profileName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->profileName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1profileName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->profileName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1friendlyName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->friendlyName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1friendlyName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->friendlyName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1autologin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autologin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1autologin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (bool) ((arg1)->autologin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1externalPki_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->externalPki = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1externalPki_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (bool) ((arg1)->externalPki);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1staticChallenge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->staticChallenge = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1staticChallenge_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->staticChallenge);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1staticChallengeEcho_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->staticChallengeEcho = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1staticChallengeEcho_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (bool) ((arg1)->staticChallengeEcho);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1privateKeyPasswordRequired_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->privateKeyPasswordRequired = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1privateKeyPasswordRequired_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (bool) ((arg1)->privateKeyPasswordRequired);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1allowPasswordSave_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->allowPasswordSave = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1allowPasswordSave_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (bool) ((arg1)->allowPasswordSave);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1remoteHost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->remoteHost = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1remoteHost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->remoteHost);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1remotePort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->remotePort = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1remotePort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->remotePort);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1remoteProto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->remoteProto = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1remoteProto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->remoteProto);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1serverList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *arg2 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  arg2 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jarg2; 
  if (arg1) (arg1)->serverList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1EvalConfig_1serverList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  result = (std::vector< openvpn::ClientAPI::ServerEntry > *)& ((arg1)->serverList);
  *(std::vector< openvpn::ClientAPI::ServerEntry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1EvalConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::EvalConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::EvalConfig *)new openvpn::ClientAPI::EvalConfig();
  *(openvpn::ClientAPI::EvalConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1EvalConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->password = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  result = (std::string *) & ((arg1)->password);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1response_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->response = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1response_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  result = (std::string *) & ((arg1)->response);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1dynamicChallengeCookie_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->dynamicChallengeCookie = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1dynamicChallengeCookie_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  result = (std::string *) & ((arg1)->dynamicChallengeCookie);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1replacePasswordWithSessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->replacePasswordWithSessionID = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1replacePasswordWithSessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  result = (bool) ((arg1)->replacePasswordWithSessionID);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1cachePassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cachePassword = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ProvideCreds_1cachePassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  result = (bool) ((arg1)->cachePassword);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1ProvideCreds(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::ProvideCreds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::ProvideCreds *)new openvpn::ClientAPI::ProvideCreds();
  *(openvpn::ClientAPI::ProvideCreds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1ProvideCreds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1SessionToken_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::SessionToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1SessionToken_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::SessionToken **)&jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1SessionToken_1session_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::SessionToken **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->session_id = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1SessionToken_1session_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::SessionToken **)&jarg1; 
  result = (std::string *) & ((arg1)->session_id);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1SessionToken(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::SessionToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::SessionToken *)new openvpn::ClientAPI::SessionToken();
  *(openvpn::ClientAPI::SessionToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1SessionToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::SessionToken **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1DynamicChallenge_1challenge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->challenge = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1DynamicChallenge_1challenge_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  result = (std::string *) & ((arg1)->challenge);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1DynamicChallenge_1echo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->echo = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1DynamicChallenge_1echo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  result = (bool) ((arg1)->echo);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1DynamicChallenge_1responseRequired_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->responseRequired = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1DynamicChallenge_1responseRequired_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  result = (bool) ((arg1)->responseRequired);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1DynamicChallenge_1stateID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->stateID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1DynamicChallenge_1stateID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  result = (std::string *) & ((arg1)->stateID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1DynamicChallenge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::DynamicChallenge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::DynamicChallenge *)new openvpn::ClientAPI::DynamicChallenge();
  *(openvpn::ClientAPI::DynamicChallenge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1DynamicChallenge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1KeyValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::KeyValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::KeyValue *)new openvpn::ClientAPI::KeyValue();
  *(openvpn::ClientAPI::KeyValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1KeyValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  openvpn::ClientAPI::KeyValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (openvpn::ClientAPI::KeyValue *)new openvpn::ClientAPI::KeyValue(arg1,arg2);
  *(openvpn::ClientAPI::KeyValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1KeyValue_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::KeyValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1KeyValue_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::KeyValue **)&jarg1; 
  result = (std::string *) & ((arg1)->key);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1KeyValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::KeyValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1KeyValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::KeyValue **)&jarg1; 
  result = (std::string *) & ((arg1)->value);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1KeyValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::KeyValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->content = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->content);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1contentList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *arg2 = (std::vector< openvpn::ClientAPI::KeyValue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = *(std::vector< openvpn::ClientAPI::KeyValue > **)&jarg2; 
  if (arg1) (arg1)->contentList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1contentList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::vector< openvpn::ClientAPI::KeyValue > *)& ((arg1)->contentList);
  *(std::vector< openvpn::ClientAPI::KeyValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1guiVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->guiVersion = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1guiVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->guiVersion);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1ssoMethods_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ssoMethods = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1ssoMethods_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->ssoMethods);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1hwAddrOverride_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->hwAddrOverride = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1hwAddrOverride_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->hwAddrOverride);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1platformVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->platformVersion = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1platformVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->platformVersion);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1serverOverride_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->serverOverride = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1serverOverride_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->serverOverride);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1portOverride_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->portOverride = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1portOverride_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->portOverride);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1protoOverride_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->protoOverride = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1protoOverride_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->protoOverride);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1ipv6_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ipv6 = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1ipv6_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->ipv6);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1connTimeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connTimeout = arg2;
}


SWIGEXPORT jint JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1connTimeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (int) ((arg1)->connTimeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1tunPersist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tunPersist = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1tunPersist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->tunPersist);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1googleDnsFallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->googleDnsFallback = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1googleDnsFallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->googleDnsFallback);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1synchronousDnsLookup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->synchronousDnsLookup = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1synchronousDnsLookup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->synchronousDnsLookup);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1autologinSessions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autologinSessions = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1autologinSessions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->autologinSessions);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1retryOnAuthFailed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->retryOnAuthFailed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1retryOnAuthFailed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->retryOnAuthFailed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1externalPkiAlias_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->externalPkiAlias = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1externalPkiAlias_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->externalPkiAlias);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1disableClientCert_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disableClientCert = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1disableClientCert_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->disableClientCert);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1sslDebugLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sslDebugLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1sslDebugLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (int) ((arg1)->sslDebugLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1compressionMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->compressionMode = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1compressionMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->compressionMode);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1privateKeyPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->privateKeyPassword = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1privateKeyPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->privateKeyPassword);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1defaultKeyDirection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->defaultKeyDirection = arg2;
}


SWIGEXPORT jint JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1defaultKeyDirection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (int) ((arg1)->defaultKeyDirection);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1forceAesCbcCiphersuites_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->forceAesCbcCiphersuites = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1forceAesCbcCiphersuites_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->forceAesCbcCiphersuites);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1tlsVersionMinOverride_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->tlsVersionMinOverride = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1tlsVersionMinOverride_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->tlsVersionMinOverride);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1tlsCertProfileOverride_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->tlsCertProfileOverride = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1tlsCertProfileOverride_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->tlsCertProfileOverride);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1peerInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *arg2 = (std::vector< openvpn::ClientAPI::KeyValue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = *(std::vector< openvpn::ClientAPI::KeyValue > **)&jarg2; 
  if (arg1) (arg1)->peerInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1peerInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::vector< openvpn::ClientAPI::KeyValue > *)& ((arg1)->peerInfo);
  *(std::vector< openvpn::ClientAPI::KeyValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyHost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->proxyHost = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyHost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->proxyHost);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->proxyPort = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->proxyPort);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyUsername_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->proxyUsername = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyUsername_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->proxyUsername);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->proxyPassword = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->proxyPassword);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyAllowCleartextAuth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->proxyAllowCleartextAuth = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1proxyAllowCleartextAuth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->proxyAllowCleartextAuth);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1altProxy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->altProxy = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1altProxy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->altProxy);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1dco_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dco = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1dco_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->dco);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1echo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->echo = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1echo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->echo);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->info = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->info);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1allowLocalLanAccess_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->allowLocalLanAccess = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1allowLocalLanAccess_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->allowLocalLanAccess);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1clockTickMS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockTickMS = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1clockTickMS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (unsigned int) ((arg1)->clockTickMS);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1gremlinConfig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->gremlinConfig = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1gremlinConfig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->gremlinConfig);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1wintun_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->wintun = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Config_1wintun_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  result = (bool) ((arg1)->wintun);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1Config(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::Config *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::Config *)new openvpn::ClientAPI::Config();
  *(openvpn::ClientAPI::Config **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1Config(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Event_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Event_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  result = (bool) ((arg1)->error);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Event_1fatal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fatal = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Event_1fatal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  result = (bool) ((arg1)->fatal);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Event_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Event_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Event_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Event_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  result = (std::string *) & ((arg1)->info);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1Event(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::Event *)new openvpn::ClientAPI::Event();
  *(openvpn::ClientAPI::Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1Event(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::Event **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1defined_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->defined = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1defined_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (bool) ((arg1)->defined);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->user = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->user);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1serverHost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->serverHost = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1serverHost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->serverHost);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1serverPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->serverPort = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1serverPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->serverPort);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1serverProto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->serverProto = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1serverProto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->serverProto);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1serverIp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->serverIp = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1serverIp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->serverIp);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1vpnIp4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->vpnIp4 = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1vpnIp4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->vpnIp4);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1vpnIp6_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->vpnIp6 = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1vpnIp6_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->vpnIp6);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1gw4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->gw4 = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1gw4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->gw4);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1gw6_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->gw6 = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1gw6_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->gw6);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1clientIp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->clientIp = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1clientIp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->clientIp);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1tunName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->tunName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ConnectionInfo_1tunName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->tunName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1ConnectionInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::ConnectionInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::ConnectionInfo *)new openvpn::ClientAPI::ConnectionInfo();
  *(openvpn::ClientAPI::ConnectionInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1ConnectionInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Status_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Status_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Status **)&jarg1; 
  result = (bool) ((arg1)->error);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Status_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->status = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Status_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Status **)&jarg1; 
  result = (std::string *) & ((arg1)->status);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Status_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1Status_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Status **)&jarg1; 
  result = (std::string *) & ((arg1)->message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1Status(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::Status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::Status *)new openvpn::ClientAPI::Status();
  *(openvpn::ClientAPI::Status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1Status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::Status **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1LogInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::LogInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::LogInfo *)new openvpn::ClientAPI::LogInfo();
  *(openvpn::ClientAPI::LogInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1LogInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  openvpn::ClientAPI::LogInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (openvpn::ClientAPI::LogInfo *)new openvpn::ClientAPI::LogInfo(arg1);
  *(openvpn::ClientAPI::LogInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LogInfo_1text_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::LogInfo *arg1 = (openvpn::ClientAPI::LogInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::LogInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->text = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1LogInfo_1text_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::LogInfo *arg1 = (openvpn::ClientAPI::LogInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::LogInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->text);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1LogInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::LogInfo *arg1 = (openvpn::ClientAPI::LogInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::LogInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1bytesIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->bytesIn = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1bytesIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  result = (long long) ((arg1)->bytesIn);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1packetsIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->packetsIn = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1packetsIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  result = (long long) ((arg1)->packetsIn);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1errorsIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->errorsIn = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1errorsIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  result = (long long) ((arg1)->errorsIn);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1bytesOut_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->bytesOut = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1bytesOut_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  result = (long long) ((arg1)->bytesOut);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1packetsOut_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->packetsOut = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1packetsOut_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  result = (long long) ((arg1)->packetsOut);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1errorsOut_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->errorsOut = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1InterfaceStats_1errorsOut_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  result = (long long) ((arg1)->errorsOut);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1InterfaceStats(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::InterfaceStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::InterfaceStats *)new openvpn::ClientAPI::InterfaceStats();
  *(openvpn::ClientAPI::InterfaceStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1InterfaceStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1bytesIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->bytesIn = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1bytesIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  result = (long long) ((arg1)->bytesIn);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1bytesOut_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->bytesOut = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1bytesOut_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  result = (long long) ((arg1)->bytesOut);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1packetsIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->packetsIn = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1packetsIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  result = (long long) ((arg1)->packetsIn);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1packetsOut_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->packetsOut = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1packetsOut_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  result = (long long) ((arg1)->packetsOut);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1lastPacketReceived_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lastPacketReceived = arg2;
}


SWIGEXPORT jint JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1TransportStats_1lastPacketReceived_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  result = (int) ((arg1)->lastPacketReceived);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1TransportStats(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::TransportStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::TransportStats *)new openvpn::ClientAPI::TransportStats();
  *(openvpn::ClientAPI::TransportStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1TransportStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::TransportStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->status = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->status);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1errorText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->errorText = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1errorText_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->errorText);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1basename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->basename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1basename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->basename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1profileContent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->profileContent = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1profileContent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->profileContent);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1refPathList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->refPathList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1MergeConfig_1refPathList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->refPathList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1MergeConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::MergeConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::MergeConfig *)new openvpn::ClientAPI::MergeConfig();
  *(openvpn::ClientAPI::MergeConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1MergeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIRequestBase_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIRequestBase_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  result = (bool) ((arg1)->error);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIRequestBase_1errorText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->errorText = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIRequestBase_1errorText_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  result = (std::string *) & ((arg1)->errorText);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIRequestBase_1invalidAlias_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->invalidAlias = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIRequestBase_1invalidAlias_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  result = (bool) ((arg1)->invalidAlias);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIRequestBase_1alias_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->alias = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKIRequestBase_1alias_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  result = (std::string *) & ((arg1)->alias);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1ExternalPKIRequestBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::ExternalPKIRequestBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::ExternalPKIRequestBase *)new openvpn::ClientAPI::ExternalPKIRequestBase();
  *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1ExternalPKIRequestBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKICertRequest_1cert_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->cert = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKICertRequest_1cert_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&jarg1; 
  result = (std::string *) & ((arg1)->cert);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKICertRequest_1supportingChain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->supportingChain = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKICertRequest_1supportingChain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&jarg1; 
  result = (std::string *) & ((arg1)->supportingChain);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1ExternalPKICertRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::ExternalPKICertRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::ExternalPKICertRequest *)new openvpn::ClientAPI::ExternalPKICertRequest();
  *(openvpn::ClientAPI::ExternalPKICertRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1ExternalPKICertRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKISignRequest_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKISignRequest_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg1; 
  result = (std::string *) & ((arg1)->data);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKISignRequest_1sig_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->sig = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKISignRequest_1sig_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg1; 
  result = (std::string *) & ((arg1)->sig);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKISignRequest_1algorithm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->algorithm = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKISignRequest_1algorithm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg1; 
  result = (std::string *) & ((arg1)->algorithm);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1ExternalPKISignRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::ExternalPKISignRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::ExternalPKISignRequest *)new openvpn::ClientAPI::ExternalPKISignRequest();
  *(openvpn::ClientAPI::ExternalPKISignRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1ExternalPKISignRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1host_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->host = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1host_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  result = (std::string *) & ((arg1)->host);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  result = (std::string *) & ((arg1)->ip);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->port = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  result = (std::string *) & ((arg1)->port);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1proto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->proto = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1proto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  result = (std::string *) & ((arg1)->proto);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1RemoteOverride_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  result = (std::string *) & ((arg1)->error);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1RemoteOverride(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::RemoteOverride *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::RemoteOverride *)new openvpn::ClientAPI::RemoteOverride();
  *(openvpn::ClientAPI::RemoteOverride **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1RemoteOverride(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_new_1ClientAPI_1OpenVPNClient(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (openvpn::ClientAPI::OpenVPNClient *)new SwigDirector_ClientAPI_OpenVPNClient(jenv);
  *(openvpn::ClientAPI::OpenVPNClient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_delete_1ClientAPI_1OpenVPNClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1init_1process(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  openvpn::ClientAPI::OpenVPNClient::init_process();
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1uninit_1process(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  openvpn::ClientAPI::OpenVPNClient::uninit_process();
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1merge_1config_1static(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  openvpn::ClientAPI::MergeConfig result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = openvpn::ClientAPI::OpenVPNClient::merge_config_static((std::string const &)*arg1,arg2);
  *(openvpn::ClientAPI::MergeConfig **)&jresult = new openvpn::ClientAPI::MergeConfig((const openvpn::ClientAPI::MergeConfig &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1merge_1config_1string_1static(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  openvpn::ClientAPI::MergeConfig result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = openvpn::ClientAPI::OpenVPNClient::merge_config_string_static((std::string const &)*arg1);
  *(openvpn::ClientAPI::MergeConfig **)&jresult = new openvpn::ClientAPI::MergeConfig((const openvpn::ClientAPI::MergeConfig &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1eval_1config_1static(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::Config *arg1 = 0 ;
  openvpn::ClientAPI::EvalConfig result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::Config **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::Config const & reference is null");
    return 0;
  } 
  result = openvpn::ClientAPI::OpenVPNClient::eval_config_static((openvpn::ClientAPI::Config const &)*arg1);
  *(openvpn::ClientAPI::EvalConfig **)&jresult = new openvpn::ClientAPI::EvalConfig((const openvpn::ClientAPI::EvalConfig &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1max_1profile_1size(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)openvpn::ClientAPI::OpenVPNClient::max_profile_size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1parse_1dynamic_1challenge(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  openvpn::ClientAPI::DynamicChallenge *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(openvpn::ClientAPI::DynamicChallenge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::DynamicChallenge & reference is null");
    return 0;
  } 
  result = (bool)openvpn::ClientAPI::OpenVPNClient::parse_dynamic_challenge((std::string const &)*arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1eval_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::Config *arg2 = 0 ;
  openvpn::ClientAPI::EvalConfig result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::Config const & reference is null");
    return 0;
  } 
  result = (arg1)->eval_config((openvpn::ClientAPI::Config const &)*arg2);
  *(openvpn::ClientAPI::EvalConfig **)&jresult = new openvpn::ClientAPI::EvalConfig((const openvpn::ClientAPI::EvalConfig &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1provide_1creds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::ProvideCreds *arg2 = 0 ;
  openvpn::ClientAPI::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::ProvideCreds **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::ProvideCreds const & reference is null");
    return 0;
  } 
  result = (arg1)->provide_creds((openvpn::ClientAPI::ProvideCreds const &)*arg2);
  *(openvpn::ClientAPI::Status **)&jresult = new openvpn::ClientAPI::Status((const openvpn::ClientAPI::Status &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1socket_1protect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->socket_protect(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  result = (arg1)->connect();
  *(openvpn::ClientAPI::Status **)&jresult = new openvpn::ClientAPI::Status((const openvpn::ClientAPI::Status &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1connection_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::ConnectionInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  result = (arg1)->connection_info();
  *(openvpn::ClientAPI::ConnectionInfo **)&jresult = new openvpn::ClientAPI::ConnectionInfo((const openvpn::ClientAPI::ConnectionInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1session_1token(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::SessionToken *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::SessionToken **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::SessionToken & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->session_token(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1pause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->pause((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1reconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reconnect(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1pause_1on_1connection_1timeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  result = (bool)(arg1)->pause_on_connection_timeout();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1stats_1n(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)openvpn::ClientAPI::OpenVPNClient::stats_n();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1stats_1name(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = openvpn::ClientAPI::OpenVPNClient::stats_name(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1stats_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (long long)((openvpn::ClientAPI::OpenVPNClient const *)arg1)->stats_value(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1stats_1bundle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::vector< long long > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  result = ((openvpn::ClientAPI::OpenVPNClient const *)arg1)->stats_bundle();
  *(std::vector< long long > **)&jresult = new std::vector< long long >((const std::vector< long long > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1tun_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::InterfaceStats result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  result = ((openvpn::ClientAPI::OpenVPNClient const *)arg1)->tun_stats();
  *(openvpn::ClientAPI::InterfaceStats **)&jresult = new openvpn::ClientAPI::InterfaceStats((const openvpn::ClientAPI::InterfaceStats &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1transport_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::TransportStats result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  result = ((openvpn::ClientAPI::OpenVPNClient const *)arg1)->transport_stats();
  *(openvpn::ClientAPI::TransportStats **)&jresult = new openvpn::ClientAPI::TransportStats((const openvpn::ClientAPI::TransportStats &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1post_1cc_1msg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->post_cc_msg((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1event(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::Event *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::Event **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::Event const & reference is null");
    return ;
  } 
  (arg1)->event((openvpn::ClientAPI::Event const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::LogInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::LogInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::LogInfo const & reference is null");
    return ;
  } 
  (arg1)->log((openvpn::ClientAPI::LogInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1external_1pki_1cert_1request(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::ExternalPKICertRequest *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::ExternalPKICertRequest & reference is null");
    return ;
  } 
  (arg1)->external_pki_cert_request(*arg2);
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1external_1pki_1sign_1request(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::ExternalPKISignRequest *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::ExternalPKISignRequest & reference is null");
    return ;
  } 
  (arg1)->external_pki_sign_request(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1remote_1override_1enabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  result = (bool)(arg1)->remote_override_enabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1remote_1override_1enabledSwigExplicitClientAPI_1OpenVPNClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  result = (bool)(arg1)->openvpn::ClientAPI::OpenVPNClient::remote_override_enabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1remote_1override(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::RemoteOverride *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::RemoteOverride **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::RemoteOverride & reference is null");
    return ;
  } 
  (arg1)->remote_override(*arg2);
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1remote_1overrideSwigExplicitClientAPI_1OpenVPNClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::RemoteOverride *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  arg2 = *(openvpn::ClientAPI::RemoteOverride **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "openvpn::ClientAPI::RemoteOverride & reference is null");
    return ;
  } 
  (arg1)->openvpn::ClientAPI::OpenVPNClient::remote_override(*arg2);
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1clock_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  (arg1)->clock_tick();
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1clock_1tickSwigExplicitClientAPI_1OpenVPNClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1; 
  (arg1)->openvpn::ClientAPI::OpenVPNClient::clock_tick();
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1crypto_1self_1test(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = openvpn::ClientAPI::OpenVPNClient::crypto_self_test();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1app_1expire(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)openvpn::ClientAPI::OpenVPNClient::app_expire();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1platform(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = openvpn::ClientAPI::OpenVPNClient::platform();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1copyright(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = openvpn::ClientAPI::OpenVPNClient::copyright();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  openvpn::ClientAPI::OpenVPNClient *obj = *((openvpn::ClientAPI::OpenVPNClient **)&objarg);
  (void)jcls;
  SwigDirector_ClientAPI_OpenVPNClient *director = dynamic_cast<SwigDirector_ClientAPI_OpenVPNClient *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  openvpn::ClientAPI::OpenVPNClient *obj = *((openvpn::ClientAPI::OpenVPNClient **)&objarg);
  SwigDirector_ClientAPI_OpenVPNClient *director = dynamic_cast<SwigDirector_ClientAPI_OpenVPNClient *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKICertRequest_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openvpn::ClientAPI::ExternalPKIRequestBase **)&baseptr = *(openvpn::ClientAPI::ExternalPKICertRequest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1ExternalPKISignRequest_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openvpn::ClientAPI::ExternalPKIRequestBase **)&baseptr = *(openvpn::ClientAPI::ExternalPKISignRequest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_ClientAPI_1OpenVPNClient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(openvpn::TunBuilderBase **)&baseptr = *(openvpn::ClientAPI::OpenVPNClient **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_net_openvpn_ovpn3_ovpncliJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[33] = {
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_new", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_layer", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;I)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_remote_address", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;Z)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_add_address", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;ILjava/lang/String;ZZ)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_route_metric_default", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;I)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_reroute_gw", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;ZZJ)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_add_route", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;IIZ)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_exclude_route", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;IIZ)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_add_dns_server", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;Z)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_add_search_domain", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_mtu", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;I)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_session_name", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_add_proxy_bypass", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_proxy_auto_config_url", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_proxy_http", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;I)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_proxy_https", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;I)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_add_wins_server", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_block_ipv6", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Z)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_set_adapter_domain_suffix", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_establish", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;)I" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_persist", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_get_local_networks", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Z)J" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_establish_lite", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;)V" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_tun_builder_teardown", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;Z)V" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_socket_protect", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;ILjava/lang/String;Z)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_pause_on_connection_timeout", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_event", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;J)V" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_log", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;J)V" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_external_pki_cert_request", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;J)V" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_external_pki_sign_request", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;J)V" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_remote_override_enabled", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;)Z" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_remote_override", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;J)V" 
    },
    {
      "SwigDirector_ClientAPI_OpenVPNClient_clock_tick", "(Lnet/openvpn/ovpn3/ClientAPI_OpenVPNClient;)V" 
    }
  };
  Swig::jclass_ovpncliJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_ovpncliJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

